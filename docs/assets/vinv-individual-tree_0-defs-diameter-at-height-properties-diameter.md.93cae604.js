import{_ as e,c as t,o as a,a as s}from"./app.64bfac9b.js";const u=JSON.parse('{"title":"Diameter Schema","description":"","frontmatter":{},"headers":[{"level":2,"title":"diameter Type","slug":"diameter-type","link":"#diameter-type","children":[]},{"level":2,"title":"diameter Constraints","slug":"diameter-constraints","link":"#diameter-constraints","children":[]},{"level":2,"title":"diameter Examples","slug":"diameter-examples","link":"#diameter-examples","children":[]}],"relativePath":"vinv-individual-tree/0-defs-diameter-at-height-properties-diameter.md","lastUpdated":null}'),i={name:"vinv-individual-tree/0-defs-diameter-at-height-properties-diameter.md"},n=s(`<h1 id="diameter-schema" tabindex="-1">Diameter Schema <a class="header-anchor" href="#diameter-schema" aria-hidden="true">#</a></h1><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">https://schema.vinv.io/vinv-individual-tree/0.0.1.json#/$defs/dimension_at_height/properties/diameter</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Diameter in CENTIMETER at measured height</p><table><thead><tr><th style="text-align:left;">Abstract</th><th style="text-align:left;">Extensible</th><th style="text-align:left;">Status</th><th style="text-align:left;">Identifiable</th><th style="text-align:left;">Custom Properties</th><th style="text-align:left;">Additional Properties</th><th style="text-align:left;">Access Restrictions</th><th style="text-align:left;">Defined In</th></tr></thead><tbody><tr><td style="text-align:left;">Can be instantiated</td><td style="text-align:left;">No</td><td style="text-align:left;">Unknown status</td><td style="text-align:left;">Unknown identifiability</td><td style="text-align:left;">Forbidden</td><td style="text-align:left;">Allowed</td><td style="text-align:left;">none</td><td style="text-align:left;"><a href="0.0.1.doc.json" title="open original schema">0.0.1.doc.json*</a></td></tr></tbody></table><h2 id="diameter-type" tabindex="-1">diameter Type <a class="header-anchor" href="#diameter-type" aria-hidden="true">#</a></h2><p><code>number</code> (<a href="./0-defs-diameter-at-height-properties-diameter.html">Diameter</a>)</p><h2 id="diameter-constraints" tabindex="-1">diameter Constraints <a class="header-anchor" href="#diameter-constraints" aria-hidden="true">#</a></h2><p><strong>maximum</strong>: the value of this number must smaller than or equal to: <code>100</code></p><p><strong>minimum</strong>: the value of this number must greater than or equal to: <code>10</code></p><h2 id="diameter-examples" tabindex="-1">diameter Examples <a class="header-anchor" href="#diameter-examples" aria-hidden="true">#</a></h2><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">34</span></span>
<span class="line"></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">38</span></span>
<span class="line"></span></code></pre></div>`,12),l=[n];function r(d,o,c,p,h,m){return a(),t("div",null,l)}const f=e(i,[["render",r]]);export{u as __pageData,f as default};
